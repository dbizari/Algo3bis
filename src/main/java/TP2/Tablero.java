/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TP2;

import Excepciones.*;

import java.util.HashMap;
import java.util.Set;

public class Tablero {

    //private Arbitro arbitro;
    private HashMap<Coordenada, Celda> tablero;
    private int filasTotales;
    private int columnasTotales;

    public Tablero(int cantFilas, int cantCol) {
        tablero = new HashMap<Coordenada, Celda>();
        //arbitro = new Arbitro(cantCol, cantFilas, 0, 0, cantFilas/2);
        filasTotales = cantFilas;
        columnasTotales = cantCol;

        for(int i=0; i< cantCol; i++){
            for(int j = 0; j < cantFilas; j++) {
                Coordenada coordenada = new Coordenada(i,j);
                tablero.put(coordenada, new Celda());
            }
        }
    }

    public int getCantFilas() {
        return filasTotales;
    }

    public int getCantColumnas() {
        return columnasTotales;
    }

    private Celda getCeldaPorCoordenada(Coordenada coordenada) throws CoordenadaFueraDeRango{
        Celda celda = tablero.get(coordenada);
        if (celda == null){
            throw new CoordenadaFueraDeRango();
        }
        return celda;
    }

    public Coordenada getCoordenada(int x, int y) throws CoordenadaFueraDeRango {
        Set<Coordenada> setCoordenadas = tablero.keySet();
        for (Coordenada coordenada : setCoordenadas) {
            if (x == coordenada.getCoordenadaX() && y == coordenada.getCoordenadaY()) {
                return coordenada;
            }
        }
        throw new CoordenadaFueraDeRango();
    }

    private Celda getCelda(int x, int y) throws CoordenadaFueraDeRango {
        //VER SI SE PUEDE CAMBIAR POR TABLERO.GET(COORDENADA), PASANDO COMO PARAMETRO LA COORDENADA.
        Set<Coordenada> setCoordenadas = tablero.keySet();
        for (Coordenada coordenada : setCoordenadas) {
            if (x == coordenada.getCoordenadaX() && y == coordenada.getCoordenadaY()) {
                return tablero.get(coordenada);
            }
        }
        throw new CoordenadaFueraDeRango();

    }

    public Coordenada getCoordenadasUnidadEn(int x, int y) throws CoordenadaFueraDeRango {
        Celda celda = getCelda(x, y);
        return celda.getUnidad().getCoordenadas();
    }

    public void colocarUnidad(Unidad unidad) throws CeldaDeTerritorioEnemigo, CeldaOcupada, CoordenadaFueraDeRango {
        Coordenada coordenadas = unidad.getCoordenadas();
        Jugador jugador = unidad.getDue√±o();
        coordenadas.coordenadaDentroDeTablero(filasTotales, 0, columnasTotales, 0);
        coordenadas.enSectorAliado(jugador);
        int x = coordenadas.getCoordenadaX();
        int y = coordenadas.getCoordenadaY();
        Celda celda = getCelda(x, y);
        celda.colocarUnidad(unidad);
    }

    public void atacarDesdeHasta(int desdeFil, int desdeCol, int hastaFil, int hastaCol) throws ErrorAutoAtaque, ErrorNoHayUnidadAtacante, CoordenadaFueraDeRango {
        Celda celdaAliada = getCelda(desdeFil, desdeCol);
        Celda celdaEnemiga = getCelda(hastaFil, hastaCol);
        celdaAliada.atacar(celdaEnemiga);
    }

    public void moverUnidadDesdeHasta(int desdeFil, int desdeCol, int hastaFil, int hastaCol) throws CeldaOcupada, NoPuedeMoverseException, CoordenadaFueraDeRango {
        Celda celdaNueva = this.getCelda(hastaFil, hastaCol);
        Celda celdaActual = this.getCelda(desdeFil, desdeCol);
        celdaNueva.colocarUnidad(celdaActual.getUnidad());
        celdaActual.vaciar();
        Coordenada coordenadaAMover = getCoordenada(hastaFil, hastaCol);
        celdaNueva.getUnidad().mover(coordenadaAMover);
    }

    public int verVida(int x, int y) throws CoordenadaFueraDeRango {
        Celda celda = getCelda(x, y);
        return celda.getUnidad().verVida();
    }

    public void curarDesdeHasta(int desdeFil, int desdeCol, int hastaFil, int hastaCol) throws NoPuedeCurar, ErrorAutoAtaque, ErrorNoHayUnidadAtacante, CoordenadaFueraDeRango {
        Celda celdaCuradora = getCelda(desdeFil, desdeCol);
        Celda celdaLastimada = getCelda(hastaFil, hastaCol);
        celdaCuradora.curar(celdaLastimada);
    }


}

